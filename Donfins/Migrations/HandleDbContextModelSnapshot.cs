// <auto-generated />
using System;
using System.Numerics;
using Dofins.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Dofins.Migrations
{
    [DbContext(typeof(HandleDbContext))]
    partial class HandleDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Dofins.Models.DailyInfor", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<double>("Average")
                        .HasColumnType("double precision");

                    b.Property<double>("Close")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<BigInteger>("FreeShare")
                        .HasColumnType("numeric");

                    b.Property<double>("High")
                        .HasColumnType("double precision");

                    b.Property<double>("Low")
                        .HasColumnType("double precision");

                    b.Property<BigInteger>("MarketCap")
                        .HasColumnType("numeric");

                    b.Property<double>("Open")
                        .HasColumnType("double precision");

                    b.Property<BigInteger>("ShareOutStanding")
                        .HasColumnType("numeric");

                    b.Property<BigInteger>("Volume")
                        .HasColumnType("numeric");

                    b.Property<long>("tickersId")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("tickersId");

                    b.ToTable("dailyInfors");
                });

            modelBuilder.Entity("Dofins.Models.IntradayQuote", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("TotalVolume")
                        .HasColumnType("double precision");

                    b.Property<double>("Volume")
                        .HasColumnType("double precision");

                    b.HasKey("ID");

                    b.ToTable("intradayQuotes");
                });

            modelBuilder.Entity("Dofins.Models.MarketInfoChanges", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<int?>("Advances")
                        .HasColumnType("integer");

                    b.Property<double?>("AdvancesValue")
                        .HasColumnType("double precision");

                    b.Property<double?>("BuyForeignQuantity")
                        .HasColumnType("double precision");

                    b.Property<double?>("BuyForeignValue")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Declines")
                        .HasColumnType("integer");

                    b.Property<double?>("DeclinesValue")
                        .HasColumnType("double precision");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Index1")
                        .HasColumnType("double precision");

                    b.Property<double?>("Index2")
                        .HasColumnType("double precision");

                    b.Property<double?>("Index3")
                        .HasColumnType("double precision");

                    b.Property<double?>("IndexBasic")
                        .HasColumnType("double precision");

                    b.Property<double?>("IndexCeiling")
                        .HasColumnType("double precision");

                    b.Property<double?>("IndexCurrent")
                        .HasColumnType("double precision");

                    b.Property<double?>("IndexFloor")
                        .HasColumnType("double precision");

                    b.Property<double?>("IndexHigh")
                        .HasColumnType("double precision");

                    b.Property<double?>("IndexLow")
                        .HasColumnType("double precision");

                    b.Property<int?>("Minutes")
                        .HasColumnType("integer");

                    b.Property<double?>("PTValue")
                        .HasColumnType("double precision");

                    b.Property<double?>("PTVolume")
                        .HasColumnType("double precision");

                    b.Property<double?>("PriceAsk1")
                        .HasColumnType("double precision");

                    b.Property<double?>("PriceAsk2")
                        .HasColumnType("double precision");

                    b.Property<double?>("PriceAsk3")
                        .HasColumnType("double precision");

                    b.Property<double?>("PriceBid1")
                        .HasColumnType("double precision");

                    b.Property<double?>("PriceBid2")
                        .HasColumnType("double precision");

                    b.Property<double?>("PriceBid3")
                        .HasColumnType("double precision");

                    b.Property<double?>("QuantityAsk1")
                        .HasColumnType("double precision");

                    b.Property<double?>("QuantityAsk2")
                        .HasColumnType("double precision");

                    b.Property<double?>("QuantityAsk3")
                        .HasColumnType("double precision");

                    b.Property<double?>("QuantityBid1")
                        .HasColumnType("double precision");

                    b.Property<double?>("QuantityBid2")
                        .HasColumnType("double precision");

                    b.Property<double?>("QuantityBid3")
                        .HasColumnType("double precision");

                    b.Property<double?>("SellForeignQuantity")
                        .HasColumnType("double precision");

                    b.Property<double?>("SellForeignValue")
                        .HasColumnType("double precision");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("TotalTrade")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalTrade1")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalTrade2")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalTrade3")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalValue")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalValue1")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalValue2")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalValue3")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalVolume")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalVolume1")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalVolume2")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalVolume3")
                        .HasColumnType("double precision");

                    b.Property<int?>("Traded")
                        .HasColumnType("integer");

                    b.Property<int?>("Unchange")
                        .HasColumnType("integer");

                    b.Property<double?>("UnchangeValue")
                        .HasColumnType("double precision");

                    b.Property<int?>("Untraded")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("marketInfo");
                });

            modelBuilder.Entity("Dofins.Models.QuoteChanges", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<double?>("BuyCount")
                        .HasColumnType("double precision");

                    b.Property<double?>("BuyForeignQuantity")
                        .HasColumnType("double precision");

                    b.Property<double?>("BuyForeignValue")
                        .HasColumnType("double precision");

                    b.Property<double?>("BuyQuantity")
                        .HasColumnType("double precision");

                    b.Property<double?>("CurrentForeignRoom")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("PriceAsk1")
                        .HasColumnType("double precision");

                    b.Property<double?>("PriceAsk2")
                        .HasColumnType("double precision");

                    b.Property<double?>("PriceAsk3")
                        .HasColumnType("double precision");

                    b.Property<double?>("PriceAverage")
                        .HasColumnType("double precision");

                    b.Property<double?>("PriceBasic")
                        .HasColumnType("double precision");

                    b.Property<double?>("PriceBid1")
                        .HasColumnType("double precision");

                    b.Property<double?>("PriceBid2")
                        .HasColumnType("double precision");

                    b.Property<double?>("PriceBid3")
                        .HasColumnType("double precision");

                    b.Property<double?>("PriceCeiling")
                        .HasColumnType("double precision");

                    b.Property<double?>("PriceChange")
                        .HasColumnType("double precision");

                    b.Property<double?>("PriceClose")
                        .HasColumnType("double precision");

                    b.Property<double?>("PriceCurrent")
                        .HasColumnType("double precision");

                    b.Property<double?>("PriceFloor")
                        .HasColumnType("double precision");

                    b.Property<double?>("PriceHigh")
                        .HasColumnType("double precision");

                    b.Property<double?>("PriceLast")
                        .HasColumnType("double precision");

                    b.Property<double?>("PriceLow")
                        .HasColumnType("double precision");

                    b.Property<double?>("PriceOpen")
                        .HasColumnType("double precision");

                    b.Property<double?>("PricePercentChange")
                        .HasColumnType("double precision");

                    b.Property<double?>("QuantityAsk1")
                        .HasColumnType("double precision");

                    b.Property<double?>("QuantityAsk2")
                        .HasColumnType("double precision");

                    b.Property<double?>("QuantityAsk3")
                        .HasColumnType("double precision");

                    b.Property<double?>("QuantityBid1")
                        .HasColumnType("double precision");

                    b.Property<double?>("QuantityBid2")
                        .HasColumnType("double precision");

                    b.Property<double?>("QuantityBid3")
                        .HasColumnType("double precision");

                    b.Property<double?>("SellCount")
                        .HasColumnType("double precision");

                    b.Property<double?>("SellForeignQuantity")
                        .HasColumnType("double precision");

                    b.Property<double?>("SellForeignValue")
                        .HasColumnType("double precision");

                    b.Property<double?>("SellQuantity")
                        .HasColumnType("double precision");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("TotalActiveBuyVolume")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalActiveSellVolume")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalTrade")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalValue")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalVolume")
                        .HasColumnType("double precision");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Volume")
                        .HasColumnType("double precision");

                    b.HasKey("ID");

                    b.ToTable("quoteChanges");
                });

            modelBuilder.Entity("Dofins.Models.Tickers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("AdjustmentCoefficent")
                        .HasColumnType("real");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PiorityLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RiskGroup")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StockSize")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("tickers");
                });

            modelBuilder.Entity("Dofins.Models.DailyInfor", b =>
                {
                    b.HasOne("Dofins.Models.Tickers", "tickers")
                        .WithMany()
                        .HasForeignKey("tickersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tickers");
                });
#pragma warning restore 612, 618
        }
    }
}
